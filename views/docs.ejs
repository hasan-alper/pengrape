<link rel="stylesheet" href="/static/dist/stylesheets/prism.css" />
<script type="module" src="/static/dist/javascripts/prism.js"></script>

<section id="contents">
	<div id="toc-container">
		<h1>Contents</h1>
		<ul id="toc-list">
			<li id="toc-overview">
				<a href="#overview"><span class="list-number">1</span>Overview</a>
			</li>
			<li id="toc-installation">
				<a href="#installation"><span class="list-number">2</span>Installation</a>
			</li>
			<li id="toc-usage">
				<a href="#usage"><span class="list-number">3</span>Usage</a>
				<ul>
					<li>
						<a href="#generating"><span class="list-number">3.1</span>Generate a result</a>
					</li>
					<li>
						<a href="#constructing"><span class="list-number">3.2</span>Construct results</a>
					</li>
				</ul>
			</li>
			<li id="toc-utilities">
				<a href="#utilities"><span class="list-number">4</span>Utilities</a>
				<ul>
					<li>
						<a href="#number"><span class="list-number">4.1</span>Number</a>
					</li>
					<li>
						<a href="#color"><span class="list-number">4.2</span>Color</a>
					</li>
					<li>
						<a href="#palette"><span class="list-number">4.3</span>Palette</a>
					</li>
					<li>
						<a href="#password"><span class="list-number">4.4</span>Password</a>
					</li>
					<li>
						<a href="#spinner"><span class="list-number">4.5</span>Spinner</a>
					</li>
					<li>
						<a href="#dice"><span class="list-number">4.6</span>Dice</a>
					</li>
					<li>
						<a href="#text"><span class="list-number">4.7</span>Text</a>
					</li>
					<li>
						<a href="#date"><span class="list-number">4.8</span>Date</a>
					</li>
				</ul>
			</li>
		</ul>
	</div>
</section>

<section id="overview">
	<section id="overview-content">
		<h1>Overview</h1>
		<p>Pengrape provides 8 different methods which include generating random number, color, palette, password, spinner, dice, text and date. Their behavior can be customized by providing different arguments.</p>
		<p>Pengrape is loaded on this page so you can just open the console on your browser and play.</p>
	</section>
</section>

<section id="installation">
	<div id="installation-content">
		<h1>Installation</h1>
		<p>Install pengrape in your Node.js powered apps with the <a href="https://www.npmjs.com/package/pengrape">npm package</a>.</p>
		<div class="method-section">
			<pre>
				<code class='language-js'>$ npm install pengrape</code>
			</pre>
		</div>
	</div>
</section>

<section id="usage">
	<div id="usage-content">
		<h1>Usage</h1>
		<h2 id="generating">Generate a result</h2>
		<p>You can use the methods listed down here to generate a random result according to your preferences.</p>
		<div class="method-section">
			<pre>
				<code class='language-js'>random.color({ format: 'hex' }); // #37988f</code>
			</pre>
		</div>
		<h2 id="constructing">Construct results</h2>
		<p>To generate multiple results, you can use the construct option in any methods you want.</p>
		<div class="method-section">
			<pre>
				<code class='language-js'>random.color({ format: 'hex', construct: 4 }); // [ '#1c5f15' , '#33168c' , '#7533f5' , '#08e4b3' ]</code>
			</pre>
		</div>
	</div>
</section>

<section id="methods">
	<div id="methods-content">
		<h1 id="utilities">Utilities</h1>
		<p>
			These methods generate random results. You can customize them by passing arguments as shown in the examples. Most of these arguments are optional. Keep in mind that each option requires specific value type or range. Otherwise
			you will get an exception. For more information, see the options and examples of the method you are interested in.
		</p>
		<div class="method-section">
			<h2 id="number">Number</h2>
			<p>Generate a random number between the two numbers that you chose.</p>
			<pre><code class='language-js'>const number = random.number();
console.log(number); // 12</code>
			</pre>
			<h3>Examples</h3>
			<pre>
				<code class='language-js'>random.number({ min: 4, max: 12 }); // 6
random.number({ min: 4, max: 12, type: 'decimal' }); // 5.1734
random.number({ min: 4, max: 12, type: 'decimal', precision: 6 }); // 11.129582
random.number({ min: 4, max: 12, parity: 'odd' }); // 7</code>
			</pre>
			<h3>Options</h3>
			<div class="options-section">
				<div class="table-section">
					<table>
						<tr>
							<th>Option</th>
							<th>Description</th>
							<th>Value</th>
							<th>Default</th>
						</tr>
						<tr>
							<td>min</td>
							<td>Minimum value.</td>
							<td>Any integer</td>
							<td>0</td>
						</tr>
						<tr>
							<td>max</td>
							<td>Maximum value.</td>
							<td>Any integer</td>
							<td>20</td>
						</tr>
						<tr>
							<td>type</td>
							<td>Indicates whether the number is integer or decimal.</td>
							<td>'integer' or 'decimal'.</td>
							<td>'integer'</td>
						</tr>
						<tr>
							<td>parity</td>
							<td>Indicates whether the number is even or odd.</td>
							<td>'none', 'odd' or 'even'</td>
							<td>'none'</td>
						</tr>
						<tr>
							<td>precision</td>
							<td>The number of digits after the point.</td>
							<td>Any positive integer</td>
							<td>4</td>
						</tr>
					</table>
				</div>
			</div>
			<h3>Notes</h3>
			<ul class="notes">
				<li>To use parity, type value must be selected as 'integer'.</li>
				<li>To use precision, type value must be selected as 'decimal'.</li>
				<li>Min and max are inclusive, so they are included in the range.</li>
			</ul>
		</div>
		<div class="method-section">
			<h2 id="color">Color</h2>
			<p>Generate HEX, RGB or HSL color codes.</p>
			<pre>
				<code class='language-js'>const color = random.color();
console.log(color); // #f28e51</code>
			</pre>
			<h3>Examples</h3>
			<pre>
				<code class='language-js'>random.color({ format: 'rgb' }); // rgb(124, 97, 124)
random.color({ format: 'rgb', syntax: 'list' }); // [ 46, 106, 45 ]
random.color({ format: 'rgb', values: [ null, null, '77' ] }); // rgb(23, 148, 77)
random.color({ format: 'all' }); // [ '#bee82c', 'rgb(190, 232, 44)', 'hsl(73, 80%, 54%)' ]
random.color({ format: 'all', values: [ 'hex', null, 'b3', null ] }); // [ '#c6b3f9' , 'rgb(198, 179, 249)', 'hsl(256, 85, 84)' ]</code>
			</pre>
			<h3>Options</h3>
			<div class="options-section">
				<div class="table-section">
					<table>
						<tr>
							<th>Option</th>
							<th>Description</th>
							<th>Value</th>
							<th>Default</th>
						</tr>
						<tr>
							<td>format</td>
							<td>Format of the color code.</td>
							<td>'hex', 'rgb', 'hsl' or 'all'</td>
							<td>'hex'</td>
						</tr>
						<tr>
							<td>syntax</td>
							<td>Syntax of the color code.</td>
							<td>'normal', 'list' or 'all'</td>
							<td>'normal'</td>
						</tr>
						<tr>
							<td>values</td>
							<td>Fixed color values for each channel.</td>
							<td>An array with three items</td>
							<td>[null, null, null]</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="method-section">
			<h2 id="palette">Palette</h2>
			<p>Generate beautiful color combinations.</p>
			<pre>
				<code class='language-js'>const palette = random.palette();
console.log(palette); // ['#e41bc9' , '#c51adb' , '#9d2adf' , '#641adb' , '#361be4' ]</code>
			</pre>
			<h3>Examples</h3>
			<pre>
				<code class='language-js'>random.palette({ harmony: 'complementary' }); // ['#29af04' , '#49e01f' , '#41ed12' , '#8a04af' , '#be12ed'
random.palette({ format: 'rgb', harmony: 'monochromatic' }); // ['rgb(34, 111, 1)' , 'rgb(91, 210, 40)' , 'rgb(73, 237, 2)' , 'rgb(41, 94, 18)' , 'rgb(59, 192, 2)' ]
random.palette({ syntax: 'list' }); // [['4e', 'b1', '6c'], ['4b', 'aa', '4f'], ['6c', 'ae', '5b'], ['76', 'aa', '4b'], ['93', 'b1', '4e']]</code>
			</pre>
			<h3>Options</h3>
			<div class="options-section">
				<div class="table-section">
					<table>
						<tr>
							<th>Option</th>
							<th>Description</th>
							<th>Value</th>
							<th>Default</th>
						</tr>
						<tr>
							<td>harmony</td>
							<td>Harmonic balance of colors.</td>
							<td>'analogous', 'monochromatic', 'triad', 'complementary', 'shades'</td>
							<td>'analogous'</td>
						</tr>
						<tr>
							<td>format</td>
							<td>Format of the color codes.</td>
							<td>'hex', 'rgb', 'hsl' or 'all'</td>
							<td>'hex'</td>
						</tr>
						<tr>
							<td>syntax</td>
							<td>Syntax of the color codes.</td>
							<td>'normal', 'list' or 'all'</td>
							<td>'normal'</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="method-section">
			<h2 id="password">Password</h2>
			<p>Generate secure passwords based on guidelines that you set.</p>
			<pre>
				<code class='language-js'>const password = random.password();
console.log(password); // W7q0Va5RY53L63o7U0it</code>
			</pre>
			<h3>Examples</h3>
			<pre>
				<code class='language-js'>random.password({ lowercase: true, uppercase: false }); // buab5r7dy5jsoy2wsu
random.password({ lowercase: true, uppercase: false, symbol: true }); // e%zpsj3c/7z%bfw#gas5u
random.password({ length: 12 }); // KVgp6piIu3Ap
random.password({ minLength: 6, maxLength: 10 }); // QTvKn52sP
random.password({ symbol: true, symbolPool: '#&'); // A#Ii9Ir2s8#Eq43EP3&Sw</code>
			</pre>
			<h3>Options</h3>
			<div class="options-section">
				<div class="table-section">
					<table>
						<tr>
							<th>Option</th>
							<th>Description</th>
							<th>Value</th>
							<th>Default</th>
						</tr>
						<tr>
							<td>lowercase</td>
							<td>Indicates whether the password contains lowercase letters.</td>
							<td>A boolean</td>
							<td>true</td>
						</tr>
						<tr>
							<td>uppercase</td>
							<td>Indicates whether the password contains uppercase letters.</td>
							<td>A boolean</td>
							<td>true</td>
						</tr>
						<tr>
							<td>number</td>
							<td>Indicates whether the password contains numbers.</td>
							<td>A boolean</td>
							<td>true</td>
						</tr>
						<tr>
							<td>symbol</td>
							<td>Indicates whether the password contains symbols.</td>
							<td>A boolean</td>
							<td>false</td>
						</tr>
						<tr>
							<td>length</td>
							<td>Length of the password.</td>
							<td>Any positive number</td>
							<td>-</td>
						</tr>
						<tr>
							<td>minLength</td>
							<td>Minimum value for length of the password.</td>
							<td>Any positive number</td>
							<td>16</td>
						</tr>
						<tr>
							<td>maxLength</td>
							<td>Maximum value for length of the password.</td>
							<td>Any positive number</td>
							<td>24</td>
						</tr>
						<tr>
							<td>symbolPool</td>
							<td>Indicates which symbols the password contains.</td>
							<td>A string</td>
							<td>'~!@#$%&*-+=?/'</td>
						</tr>
						<tr>
							<td>excludeSimilar</td>
							<td>Indicates whether the password contains similar characters.</td>
							<td>A boolean</td>
							<td>false</td>
						</tr>
					</table>
				</div>
			</div>
			<h3>Notes</h3>
			<ul class="notes">
				<li>If length option is selected, minLength and maxLength options will not work.</li>
				<li>MinLength and maxLength are inclusive, so they are included in the range.</li>
			</ul>
		</div>
		<div class="method-section">
			<h2 id="spinner">Spinner</h2>
			<p>Enter values to pick a random value.</p>
			<pre>
				<code class='language-js'>const spinner = random.spinner({ entries: [ 'Cherry', 'Apple', 'Grape' ] });
console.log(spinner); // Grape</code>
			</pre>
			<h3>Examples</h3>
			<pre>
				<code class='language-js'>random.spinner({ entries: [ 'Beagle', 'Pomeranian', 'St. Bernard', 'Pembroke Welsh Corgi' ], returnDetails: true });
// { entry: 'St. Bernard', min: 180, max: 270, deg: 237, data: 90, isWinner: true }
random.spinner({ entries: [ 'Beagle', 'Pomeranian', 'St. Bernard', 'Pembroke Welsh Corgi' ], returnEntries: true });
// [ 'Beagle', 'Pomeranian', 'St. Bernard', 'Pembroke Welsh Corgi' ]
random.spinner({ entries: [ 'Pizza', 'Lasagna', 'Quesadilla' ], returnDetails: true, returnEntries: true });
// [ { entry: 'Pizza', min: 0, max: 120, deg: 208, data: 120, isWinner: false },
// { entry: 'Lasagna', min: 120, max: 240, deg: 208, data: 120, isWinner: true },
// { entry: 'Quesadilla', min: 240, max: 360, deg: 208, data:120, isWinner: false } ]</code>
			</pre>
			<h3>Options</h3>
			<div class="options-section">
				<div class="table-section">
					<table>
						<tr>
							<th>Option</th>
							<th>Description</th>
							<th>Value</th>
							<th>Default</th>
						</tr>
						<tr>
							<td>entries</td>
							<td>Inputs for spinner.</td>
							<td>An array</td>
							<td>-</td>
						</tr>
						<tr>
							<td>returnDetails</td>
							<td>Indicates whether the method returns details of the entry/entries.</td>
							<td>A boolean</td>
							<td>false</td>
						</tr>
						<tr>
							<td>returnEntries</td>
							<td>Indicates whether the method returns all entries.</td>
							<td>A boolean</td>
							<td>false</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="method-section">
			<h2 id="dice">Dice</h2>
			<p>Roll virtual dice.</p>
			<pre>
				<code class='language-js'>const dice = random.dice();
console.log(dice); // { results: [ 2 ], total: 2 }</code>
			</pre>
			<h3>Examples</h3>
			<pre>
				<code class='language-js'>random.dice({ notation: '2d10' }); // { results: [ 4, 10 ], total: 14 }
random.dice({ notation: 'd20' }); // { results: [ 15 ], total: 15 }
random.dice({ notation: '6d20' }); // { results: [ 6, 20, 15, 19, 2, 2 ], total: 64 }</code>
			</pre>
			<h3>Options</h3>
			<div class="options-section">
				<div class="table-section">
					<table>
						<tr>
							<th>Option</th>
							<th>Description</th>
							<th>Value</th>
							<th>Default</th>
						</tr>
						<tr>
							<td>notation</td>
							<td>Dice notation. It should look like 'AdX'. (A: amount, X: sides)</td>
							<td>A string</td>
							<td>'d6'</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="method-section">
			<h2 id="text">Text</h2>
			<p>Get a random placeholder text.</p>
			<pre>
				<code class='language-js'>const text = random.text();
console.log(text); // Daklwobzahga orlkevpzon neuytakjagab laeves hegg ugleesxaq.</code>
			</pre>
			<h3>Examples</h3>
			<pre>
				<code class='language-js'>random.text({ type: 'letter' }); // p
random.text({ type: 'word' }); // luswepisa
random.text({ type: 'sentence', length: 4 }); // Neidva gejtaqxozuja diq cierl.</code>
			</pre>
			<h3>Options</h3>
			<div class="options-section">
				<div class="table-section">
					<table>
						<tr>
							<th>Option</th>
							<th>Description</th>
							<th>Value</th>
							<th>Default</th>
						</tr>
						<tr>
							<td>type</td>
							<td>Type of the text.</td>
							<td>'letter', 'syllable', 'word', 'sentence' or 'paragraph'</td>
							<td>'sentence'</td>
						</tr>
						<tr>
							<td>length</td>
							<td>Length of the text.</td>
							<td>Any positive number</td>
							<td>A number between 2 and 12</td>
						</tr>
					</table>
				</div>
			</div>
			<h3>Notes</h3>
			<ul class="notes">
				<li>Length value will not work if type value is 'letter' or 'syllable'.</li>
				<li>The unit of length value will be letters if type value is 'word'.</li>
				<li>The unit of length value will be words if type value is 'sentence'.</li>
				<li>The unit of length value will be sentences if type value is 'paragraph'.</li>
			</ul>
		</div>
		<div class="method-section">
			<h2 id="date">Date</h2>
			<p>Generate a date between the two dates that you chose.</p>
			<pre>
				<code class='language-js'>const date = random.date();
console.log(date); // 2021-04-29</code>
			</pre>
			<h3>Examples</h3>
			<pre>
				<code class='language-js'>random.date({ dateStart: [2021, 1, 1], dateEnd: [2021, 6, 17] }); // 2021-02-23
random.date({ dateStart: [1874, 4, 21], dateEnd: [1878, 11, 30], format: 'dd/mm/yyyy' }); // 29/12/1877</code>
			</pre>
			<h3>Options</h3>
			<div class="options-section">
				<div class="table-section">
					<table>
						<tr>
							<th>Option</th>
							<th>Description</th>
							<th>Value</th>
							<th>Default</th>
						</tr>
						<tr>
							<td>dateStart</td>
							<td>Start date.</td>
							<td>An array with three items</td>
							<td>today</td>
						</tr>
						<tr>
							<td>dateEnd</td>
							<td>End date.</td>
							<td>An array with three items</td>
							<td>end of the year</td>
						</tr>
						<tr>
							<td>format</td>
							<td>A custom date format.</td>
							<td>A string</td>
							<td>'yyyy-mm-dd'</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
	</div>
</section>
